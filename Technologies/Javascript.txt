JS- JavaScript
--------------

History : 
----------

Brendan Eich make first version of JavaScript is SpiderMonkey.


JavaScript invented to make webpages alive / dynamic.
core JavaScript runs on client side only.
Scripts are provided and executed as plain text. They don’t need special preparation or compilation to run.
its own specification called ECMAScript : 
    ECMAScript (/ˈɛkməskrɪpt/; ES)[1] is a JavaScript standard intended to ensure the interoperability of web pages across different browsers.[2] It is standardized by Ecma International in the document ECMA-262
    ECMAScript is commonly used for client-side scripting on the World Wide Web, and it is increasingly being used for writing server-side applications and services using Node.js and other runtime environments.
In-browser JavaScript can do everything related to webpage manipulation, interaction with the user, and the webserver.
JavaScript can easily communicate over the net to the server where the current page came from. But its ability to receive data from other sites/domains is crippled. Though possible, it requires explicit agreement (expressed in HTTP headers) from the remote side. Once again, that’s a safety limitation.
   
How do JavaScript Engines work?
--------------------------------

-> Engine Diagram

JS Code \                     (JavaScript Code)
	Parser \   				  (Split Code)
		  AST \ 			  (Abstract Syntex Tree - ast explorer shows Tree / Json Format)
	 Interpreter \			   Bytecode
		   Profiler \		   
		   	 Compiler  \
		   Optimized Code \



Engines are complicated. But the basics are easy.

1.The engine (embedded if it’s a browser) reads (“parses”) the script.
2.Then it converts (“compiles”) the script to machine code.
3.And then the machine code runs, pretty fast.

-> JavaScript is Interpreted Language.
-> JS Engines : 
	Chrome - V8 ( Written in C++ )
	Mozila - SpideMonkey

Optimized Code :
----------------
eval()          -      milicious code - expose
arguments       -      make compiler slow 
forin           -      object.keys
delete          -   
with			-


inline caching :
----------------
Compiler had understanding to making a static decision output insted of run same code.
Hidden classes :
----------------

Interpreter :
-------------
Pros (positive things):
-> Fast to work & wakeup
-> Scan by line by line

Consts (negative things):
->

Compiler : 
----------
Pros (positive things):
->slow to wakeup
->Good to execution and 

ECMAScript : 
------------
-> Set of rule that what must be in JS Engine.
-> The Above Work Diagram of JS Engine Describes the basic set of steps.

Web Assembly (Upcming Feature):
--------------
-> " Standard Binary Executable Format "
-> Directly change in Binary Formate and make fast execution.

For instance, in-browser JavaScript is able to:
-----------------------------------------------
Add new HTML to the page, change the existing content, modify styles.
React to user actions, run on mouse clicks, pointer movements, key presses.
Send requests over the network to remote servers, download and upload files (so-called AJAX and COMET technologies).
Get and set cookies, ask questions to the visitor, show messages.
Remember the data on the client-side (“local storage”).: IndexedDB




How to start writing ?
----------------------
-add script tag in html document
	<script>
		document.getElementById("demo").innerHTML = "My First JavaScript";
	</script>
-add external script file
	<script src="myScript.js"></script>
	(The benefit of a separate file is that the browser will download it and store it in its cache.)
	(reduce traffic and make web page faster.)
	(if src specified then the content written in script tag is ignored)
	(The type and language attributes are not required.)


Script Tag Attributes :
-----------------------
type="text/javascript"
src="./script/script.js"
language="javascript"


Variables
---------
-A variable is a “named storage” for data. We can use variables to store goodies, visitors, and other data.
-make sure to Remember small and capitle case & The exact Name. var A & Var a is different named variable.
-Non-Latin letters are allowed, but not recommended. like chinese words.
-some special characters use to store data like $ and _
-Variable : Use to store data
	var use to declare variable 
	eg. : var firstname = "tapan";
	      document.write("My first name is ");
	      document.write(firstname);
-some names are already reserved that you can not use to declare.
-For example: let, class, return, and function are reserved.
-let – is a modern variable declaration.
-var – is an old-school variable declaration. Normally we don’t use it at all

3 Ways to declare Variable :
	-var , declare , re declare, re assign
	-let , declare , assign & re assign
	-const, declare, can not re assign and re declare.

Rules for Variable Nameing : 
-The name must contain only letters, digits, or the symbols $ and _.
-The first character must not be a digit.

Use : 
	loop - use var that helps to reassign.
	const - static values.
	let - morden JS use let. not declaring again.

Data types: 	
-----------
-There are eight basic datatypes in javascript.
	Premitive : string, number, bigint, boolean, null, undefined
	NonPremitive : Object Array
-You can use Backticks while operation in string & other operations : document.write(`The Sum of a & b & C is ${a+b+c}`); 

Seven primitive data types:
-----------------------------
number for numbers of any kind: integer or floating-point, integers are limited by ±(253-1).
bigint for integer numbers of arbitrary length.
string for strings. A string may have zero or more characters, there’s no separate single-character type.
boolean for true/false.
null for unknown values – a standalone type that has a single value null.
undefined for unassigned values – a standalone type that has a single value undefined.
symbol for unique identifiers.

one non-primitive data type:
----------------------------
object for more complex data structures.



Operators : 
-----------
	Operator is a symbol that is used to perform operations according to user requriment.

	5 Types : 
		Arithmetic Operator : + - / * ++ -- **  %
		Assignment Operator : = += -+ /=
		Comparision Operator : < > <= ==
		Logical Operator : && || !
		Conditional Operator : ? : 
		
	= for assign values
	== for check values that assigned 
	=== for check values + data type match
	
	|| if any condition is true then output is true;
	&& if both conditions are true then output is true;
	! not operator makes output oposite.

	++ increment the specific element value
	-- decrement the specific element value
	
	+= addition with second number & assign it in first
	-= subtraction with second number & assign it in first
	*= multiplication with second number & assign it in first
	/= divistion with second number & assign it in first
	
	<  less then 
	>  greater then
	<= less then equalto
	>= greater then equalto
	
	Comparision Operators : 
		Greater/less than: a > b, a < b.
		Greater/less than or equals: a >= b, a <= b.
		Equals: a == b, please note the double equality sign == means the equality test, while a single one a = b means an assignment.
		Not equals: In maths the notation is ≠, but in JavaScript it’s written as a != b.

	conditional operator 
	(condition ? true statement : else statement)
	Example : console.warn(a == b ? "pass thai gayo" : 'fail thayo');

	The list of operators:
		AND ( & )
		OR ( | )
		XOR ( ^ )
		NOT ( ~ )
		LEFT SHIFT ( << )
		RIGHT SHIFT ( >> )
		ZERO-FILL RIGHT SHIFT ( >>> )


If Elseif Else Condition :
--------------------------
if(condition1){
	//code
}else if(conditions){
	//code
}else{
	//code
}

Random Numbers : 
----------------
var random_number = Math.random();
generates random number between 0 to 1


Comments : 
----------
Single Line Comment : // Single line comment 
Multi Line Comment : /* multi line comment */

-Comments can be put into any place of a script. They don’t affect its execution because the engine simply ignores them.
-Nested Comments are not supported.

String.trim() Method : 
The trim() method removes whitespace from both ends of a string and returns a new string, without modifying the original string.

document.writeln():
-------------------
writeln() adds a newline character after each statement. write() does not.

-----------------------------------------------------------
Error Handling in JS
------------------
Use : print and warn for errors, used insted of some conditions and do loops. 

		try{
            document.write("try will work once. <br>");
            document.write("i will try to write some fake function. <br>");
            myfunction();
        }
        catch(error){
            document.write("<br><b>Full Error is :</b>"+error);
            document.write("<br><b>Error Name is : </b>"+error.name);
            document.write("<br><b>Error Message is : </b>"+error.message);
        }
        finally{
            document.write("<br><br>finally also works ");
        }
		



-----------------------------------------------------------
Array in JS
-----------

const arr = [12,3,5,8,11,87]

//Find the smallest and largest elem in array 

const getSmallArrayElem = (arr) => {

	let smallNum = Number.POSITIVE_INFINITY;
	for(const num of arr){
		if(num < smallNum){
			smallNum = num;
		}
	}
	return smallNum;
}
getSmallArrayElem(arr);


-----------------------------------------------------------
Functions in JS : 
-----------------
Why ? => Sepraate code insted of repeating code.
What ? => Block of code to perform perticular Task.

How to Create Function ? 

function 


-----------------------------------------------------------
Parameters in JS : 
------------------
Basic Structure of Function With Parameters : 
	function functionName(parameter1, parameter2, parameter3) {
 		// code to be executed
	}

-Function parameters are the names listed in the function definition.
-Function arguments are the real values passed to (and received by) the function.




Rules for parameters : 
> JavaScript function definitions do not specify data types for parameters.
> JavaScript functions do not perform type checking on the passed arguments.
> JavaScript functions do not check the number of arguments received.


-----------------------------------------------------------
Destructuring Concept : 
-----------------------
- The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values 
	from arrays, or properties from objects, into distinct variables.

	let data = {name : "anil", age : 29, skill: "js"};
	let info = {city: "abd", mail: "tapan@gmail.com"};
	dataa = {...data,...info},
    dataaa = {data,info}
    console.warn(dataaa)// without destructure
	console.log(dataa)// with destructure
-----------------------------------------------------------


IndexedDB:
----------
The IndexedDB API (sometimes abbreviated IDB) is a complete 
database system available in the browser in which you can store 
complex related data, the types of which aren't limited to simple 
values like strings or numbers.

Cookies :
---------
Cookies are small pieces of text sent to your browser by a website
 you visit. They help that website remember information about your visit,
  which can both make it easier to visit the site again and make the 
  site more useful to you.

Alert : 
--------
window.alert("Some text");
alert(Some text);
-basic math operations can be possible in alert.
-it's wain untill press ok.

Prompt : 
---------
let age = prompt('How old are you?',"");
-Prompt use to get input.
- you can proceed the data throught that input string.
-shows a message asking the user to input text. It returns the text or, if Cancel button or Esc is clicked, null.

Confirm : 
----------
let courage = confirm("are you sure want to proceed ? ")
-the value that stored as input from confirm function that gives boolean data type, it can be true or false.

Type Conversion :
-----------------
String(value);
Number(value);
Boolean(value);
Convert value's data in 3 types of conversion.


Use-Strict Mode : 
-----------------
-just write bellow code in starting of javascript : 
	"use strict";
-The "use strict" directive was new in ECMAScript version 5 & 6.
-while using strict mode if the code is not following rules of Version 5 then it gives error.
-"use strict"; Defines that JavaScript code should be executed in "strict mode".
-When it is located at the top of a script, the whole script works the “modern” way.
-While use this method in developer console , you should write use strict and press Shift + Enter to execute next code you will write.
 
Make WebPage Reload After Some time :
--------------------------------------
setTimeout(function(){
   window.location.reload();
}, 5000);


====================================================
100 JavaScript Logical questions
----------------------------------------------------
#Aaray Compar assumed but | Memory Compare is actually done here
let a=[];
let b=[];
console.warn(a==b)
console.warn(a===b)
#Answer  = False for both
------------------------
#Aaray Compar assumed but | Memory Compare is actually done here
let a=[];
let b=a;
console.warn(a==b)
console.warn(a===b)
#Answer  = True for both
------------------------
#Aaray Compar | Element Value Compare is actually done here
let a=[20];
let b=[20];
console.warn(a[0]==b[0])
console.warn(a[0]===b[0])
#Answer  = True for both
------------------------
#destructuring
let z=[1,2,3,4]
let a= { name : "anil"};
console.warn(...z);
#Answer  = 1 2 3 4 (... use for destructuring, a is for distraction) 
------------------------
#typeof Not a Number
console.warn(typeof NaN);
#Answer =number ,while you are making math operation on string , 
the output will be NaN.
------------------------
#math logic with Operator
let data = 10 - -10;
console.warn(data);
#Answer = 20 (logic : minus minus = pluse[-- +,++ +,-+ -,+- -])
------------------------
#set data type
const data = new Set([1,1,2,3,4,5]);
#Answer = 1, 2, 3, 4, 5 (Set removes duplicate Values)
------------------------
#delete operation
let data ={ name : "Anil"};
console.warn(delete data.name);
#Answer = true (delete operator delete the property name,but the console shows the result of operation of delete , true means theat deleted.)
------------------------
#delete operation
const data = ["poojan","Tapan","Neha","stuti"];
const [y] = data;
console.warn(y);
#Answer = false (delete operator can not delete data , it can delete property)
------------------------
#get first element
const data = ["poojan","Tapan","Neha","stuti"];
const [y] = data;
console.log(y);
#Answer : poojan (just like react state , array in bracket is shows first & based on datas)
------------------------
#get secon element
const data = ["poojan","Tapan","Neha","stuti"];
const [,y] = data;
console.log(y);
#Answer : Tapan (coma skips 1)
------------------------
#get name property without operator
const data={name:"tapan",age:22,skills:"js"}
console.warn(data.name) //normal method
const {name}=data;  // without dot
console.warn(name)
------------------------
#merge 2 object
let data = {name : "anil", age : 29, skill: "js"};
let info = {city: "abd", mail: "tapan@gmail.com"};
dataa = {...data,...info}
console.warn(dataa)
------------------------
# add with distruct object & object.
let data = {name : "anil", age : 29, skill: "js"};
let info = {city: "abd", mail: "tapan@gmail.com"};
dataa = {data,...info}
console.warn(dataa)
------------------------
const name = "Tapan";
console.log(name());
#Error : name is not defined.
------------------------
const dataa = false || {} || null;
console.warn(dataa)
#output : object (or opertaor constrains data storage with objects)
------------------------
const dataa = null || false || '';
console.warn(dataa)
#output : empty string (or opertaor constrains data storage with objects)
------------------------